#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace foci
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database1")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCsapat(Csapat instance);
    partial void UpdateCsapat(Csapat instance);
    partial void DeleteCsapat(Csapat instance);
    partial void InsertPoszt(Poszt instance);
    partial void UpdatePoszt(Poszt instance);
    partial void DeletePoszt(Poszt instance);
    partial void Insertexperience(experience instance);
    partial void Updateexperience(experience instance);
    partial void Deleteexperience(experience instance);
    partial void InsertFocistak(Focistak instance);
    partial void UpdateFocistak(Focistak instance);
    partial void DeleteFocistak(Focistak instance);
    partial void InsertLiga(Liga instance);
    partial void UpdateLiga(Liga instance);
    partial void DeleteLiga(Liga instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::foci.Properties.Settings.Default.Database1ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Csapat> Csapats
		{
			get
			{
				return this.GetTable<Csapat>();
			}
		}
		
		public System.Data.Linq.Table<Poszt> Poszts
		{
			get
			{
				return this.GetTable<Poszt>();
			}
		}
		
		public System.Data.Linq.Table<experience> experiences
		{
			get
			{
				return this.GetTable<experience>();
			}
		}
		
		public System.Data.Linq.Table<Focistak> Focistaks
		{
			get
			{
				return this.GetTable<Focistak>();
			}
		}
		
		public System.Data.Linq.Table<Liga> Ligas
		{
			get
			{
				return this.GetTable<Liga>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Csapat")]
	public partial class Csapat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CsapatSK;
		
		private string _CsapatNév;
		
		private string _Ország;
		
		private string _Monogram;
		
		private System.Nullable<int> _LigaFK;
		
		private EntitySet<Focistak> _Focistaks;
		
		private EntityRef<Liga> _Liga;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCsapatSKChanging(int value);
    partial void OnCsapatSKChanged();
    partial void OnCsapatNévChanging(string value);
    partial void OnCsapatNévChanged();
    partial void OnOrszágChanging(string value);
    partial void OnOrszágChanged();
    partial void OnMonogramChanging(string value);
    partial void OnMonogramChanged();
    partial void OnLigaFKChanging(System.Nullable<int> value);
    partial void OnLigaFKChanged();
    #endregion
		
		public Csapat()
		{
			this._Focistaks = new EntitySet<Focistak>(new Action<Focistak>(this.attach_Focistaks), new Action<Focistak>(this.detach_Focistaks));
			this._Liga = default(EntityRef<Liga>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CsapatSK", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CsapatSK
		{
			get
			{
				return this._CsapatSK;
			}
			set
			{
				if ((this._CsapatSK != value))
				{
					this.OnCsapatSKChanging(value);
					this.SendPropertyChanging();
					this._CsapatSK = value;
					this.SendPropertyChanged("CsapatSK");
					this.OnCsapatSKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CsapatNév", DbType="NVarChar(50)")]
		public string CsapatNév
		{
			get
			{
				return this._CsapatNév;
			}
			set
			{
				if ((this._CsapatNév != value))
				{
					this.OnCsapatNévChanging(value);
					this.SendPropertyChanging();
					this._CsapatNév = value;
					this.SendPropertyChanged("CsapatNév");
					this.OnCsapatNévChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ország", DbType="NVarChar(50)")]
		public string Ország
		{
			get
			{
				return this._Ország;
			}
			set
			{
				if ((this._Ország != value))
				{
					this.OnOrszágChanging(value);
					this.SendPropertyChanging();
					this._Ország = value;
					this.SendPropertyChanged("Ország");
					this.OnOrszágChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Monogram", DbType="VarChar(3)")]
		public string Monogram
		{
			get
			{
				return this._Monogram;
			}
			set
			{
				if ((this._Monogram != value))
				{
					this.OnMonogramChanging(value);
					this.SendPropertyChanging();
					this._Monogram = value;
					this.SendPropertyChanged("Monogram");
					this.OnMonogramChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LigaFK", DbType="Int")]
		public System.Nullable<int> LigaFK
		{
			get
			{
				return this._LigaFK;
			}
			set
			{
				if ((this._LigaFK != value))
				{
					if (this._Liga.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLigaFKChanging(value);
					this.SendPropertyChanging();
					this._LigaFK = value;
					this.SendPropertyChanged("LigaFK");
					this.OnLigaFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Csapat_Focistak", Storage="_Focistaks", ThisKey="CsapatSK", OtherKey="CsapatFK")]
		public EntitySet<Focistak> Focistaks
		{
			get
			{
				return this._Focistaks;
			}
			set
			{
				this._Focistaks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Liga_Csapat", Storage="_Liga", ThisKey="LigaFK", OtherKey="LigaID", IsForeignKey=true)]
		public Liga Liga
		{
			get
			{
				return this._Liga.Entity;
			}
			set
			{
				Liga previousValue = this._Liga.Entity;
				if (((previousValue != value) 
							|| (this._Liga.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Liga.Entity = null;
						previousValue.Csapats.Remove(this);
					}
					this._Liga.Entity = value;
					if ((value != null))
					{
						value.Csapats.Add(this);
						this._LigaFK = value.LigaID;
					}
					else
					{
						this._LigaFK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Liga");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Focistaks(Focistak entity)
		{
			this.SendPropertyChanging();
			entity.Csapat = this;
		}
		
		private void detach_Focistaks(Focistak entity)
		{
			this.SendPropertyChanging();
			entity.Csapat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Poszt")]
	public partial class Poszt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private char _PosztID;
		
		private string _Poszt1;
		
		private EntitySet<Focistak> _Focistaks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPosztIDChanging(char value);
    partial void OnPosztIDChanged();
    partial void OnPoszt1Changing(string value);
    partial void OnPoszt1Changed();
    #endregion
		
		public Poszt()
		{
			this._Focistaks = new EntitySet<Focistak>(new Action<Focistak>(this.attach_Focistaks), new Action<Focistak>(this.detach_Focistaks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosztID", DbType="Char(1) NOT NULL", IsPrimaryKey=true)]
		public char PosztID
		{
			get
			{
				return this._PosztID;
			}
			set
			{
				if ((this._PosztID != value))
				{
					this.OnPosztIDChanging(value);
					this.SendPropertyChanging();
					this._PosztID = value;
					this.SendPropertyChanged("PosztID");
					this.OnPosztIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Poszt", Storage="_Poszt1", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Poszt1
		{
			get
			{
				return this._Poszt1;
			}
			set
			{
				if ((this._Poszt1 != value))
				{
					this.OnPoszt1Changing(value);
					this.SendPropertyChanging();
					this._Poszt1 = value;
					this.SendPropertyChanged("Poszt1");
					this.OnPoszt1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Poszt_Focistak", Storage="_Focistaks", ThisKey="PosztID", OtherKey="PosztFK")]
		public EntitySet<Focistak> Focistaks
		{
			get
			{
				return this._Focistaks;
			}
			set
			{
				this._Focistaks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Focistaks(Focistak entity)
		{
			this.SendPropertyChanging();
			entity.Poszt = this;
		}
		
		private void detach_Focistaks(Focistak entity)
		{
			this.SendPropertyChanging();
			entity.Poszt = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.experience")]
	public partial class experience : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Speed;
		
		private System.Nullable<int> _Shot;
		
		private System.Nullable<int> _Pass;
		
		private System.Nullable<int> _Dribbling;
		
		private System.Nullable<int> _Defence;
		
		private System.Nullable<int> _Physical;
		
		private EntitySet<Focistak> _Focistaks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSpeedChanging(System.Nullable<int> value);
    partial void OnSpeedChanged();
    partial void OnShotChanging(System.Nullable<int> value);
    partial void OnShotChanged();
    partial void OnPassChanging(System.Nullable<int> value);
    partial void OnPassChanged();
    partial void OnDribblingChanging(System.Nullable<int> value);
    partial void OnDribblingChanged();
    partial void OnDefenceChanging(System.Nullable<int> value);
    partial void OnDefenceChanged();
    partial void OnPhysicalChanging(System.Nullable<int> value);
    partial void OnPhysicalChanged();
    #endregion
		
		public experience()
		{
			this._Focistaks = new EntitySet<Focistak>(new Action<Focistak>(this.attach_Focistaks), new Action<Focistak>(this.detach_Focistaks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Speed", DbType="Int")]
		public System.Nullable<int> Speed
		{
			get
			{
				return this._Speed;
			}
			set
			{
				if ((this._Speed != value))
				{
					this.OnSpeedChanging(value);
					this.SendPropertyChanging();
					this._Speed = value;
					this.SendPropertyChanged("Speed");
					this.OnSpeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shot", DbType="Int")]
		public System.Nullable<int> Shot
		{
			get
			{
				return this._Shot;
			}
			set
			{
				if ((this._Shot != value))
				{
					this.OnShotChanging(value);
					this.SendPropertyChanging();
					this._Shot = value;
					this.SendPropertyChanged("Shot");
					this.OnShotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pass", DbType="Int")]
		public System.Nullable<int> Pass
		{
			get
			{
				return this._Pass;
			}
			set
			{
				if ((this._Pass != value))
				{
					this.OnPassChanging(value);
					this.SendPropertyChanging();
					this._Pass = value;
					this.SendPropertyChanged("Pass");
					this.OnPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dribbling", DbType="Int")]
		public System.Nullable<int> Dribbling
		{
			get
			{
				return this._Dribbling;
			}
			set
			{
				if ((this._Dribbling != value))
				{
					this.OnDribblingChanging(value);
					this.SendPropertyChanging();
					this._Dribbling = value;
					this.SendPropertyChanged("Dribbling");
					this.OnDribblingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Defence", DbType="Int")]
		public System.Nullable<int> Defence
		{
			get
			{
				return this._Defence;
			}
			set
			{
				if ((this._Defence != value))
				{
					this.OnDefenceChanging(value);
					this.SendPropertyChanging();
					this._Defence = value;
					this.SendPropertyChanged("Defence");
					this.OnDefenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Physical", DbType="Int")]
		public System.Nullable<int> Physical
		{
			get
			{
				return this._Physical;
			}
			set
			{
				if ((this._Physical != value))
				{
					this.OnPhysicalChanging(value);
					this.SendPropertyChanging();
					this._Physical = value;
					this.SendPropertyChanged("Physical");
					this.OnPhysicalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="experience_Focistak", Storage="_Focistaks", ThisKey="ID", OtherKey="ExpFK")]
		public EntitySet<Focistak> Focistaks
		{
			get
			{
				return this._Focistaks;
			}
			set
			{
				this._Focistaks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Focistaks(Focistak entity)
		{
			this.SendPropertyChanging();
			entity.experience = this;
		}
		
		private void detach_Focistaks(Focistak entity)
		{
			this.SendPropertyChanging();
			entity.experience = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Focistak")]
	public partial class Focistak : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FocistaID;
		
		private string _Név;
		
		private System.Nullable<System.DateTime> _SzulDat;
		
		private System.Nullable<int> _CsapatFK;
		
		private System.Nullable<char> _PosztFK;
		
		private System.Nullable<int> _ExpFK;
		
		private System.Nullable<int> _SPE;
		
		private System.Nullable<int> _SHO;
		
		private System.Nullable<int> _PAS;
		
		private System.Nullable<int> _DRI;
		
		private System.Nullable<int> _DEF;
		
		private System.Nullable<int> _PHY;
		
		private EntityRef<Csapat> _Csapat;
		
		private EntityRef<experience> _experience;
		
		private EntityRef<Poszt> _Poszt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFocistaIDChanging(int value);
    partial void OnFocistaIDChanged();
    partial void OnNévChanging(string value);
    partial void OnNévChanged();
    partial void OnSzulDatChanging(System.Nullable<System.DateTime> value);
    partial void OnSzulDatChanged();
    partial void OnCsapatFKChanging(System.Nullable<int> value);
    partial void OnCsapatFKChanged();
    partial void OnPosztFKChanging(System.Nullable<char> value);
    partial void OnPosztFKChanged();
    partial void OnExpFKChanging(System.Nullable<int> value);
    partial void OnExpFKChanged();
    partial void OnSPEChanging(System.Nullable<int> value);
    partial void OnSPEChanged();
    partial void OnSHOChanging(System.Nullable<int> value);
    partial void OnSHOChanged();
    partial void OnPASChanging(System.Nullable<int> value);
    partial void OnPASChanged();
    partial void OnDRIChanging(System.Nullable<int> value);
    partial void OnDRIChanged();
    partial void OnDEFChanging(System.Nullable<int> value);
    partial void OnDEFChanged();
    partial void OnPHYChanging(System.Nullable<int> value);
    partial void OnPHYChanged();
    #endregion
		
		public Focistak()
		{
			this._Csapat = default(EntityRef<Csapat>);
			this._experience = default(EntityRef<experience>);
			this._Poszt = default(EntityRef<Poszt>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FocistaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FocistaID
		{
			get
			{
				return this._FocistaID;
			}
			set
			{
				if ((this._FocistaID != value))
				{
					this.OnFocistaIDChanging(value);
					this.SendPropertyChanging();
					this._FocistaID = value;
					this.SendPropertyChanged("FocistaID");
					this.OnFocistaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Név", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Név
		{
			get
			{
				return this._Név;
			}
			set
			{
				if ((this._Név != value))
				{
					this.OnNévChanging(value);
					this.SendPropertyChanging();
					this._Név = value;
					this.SendPropertyChanged("Név");
					this.OnNévChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SzulDat", DbType="DateTime2")]
		public System.Nullable<System.DateTime> SzulDat
		{
			get
			{
				return this._SzulDat;
			}
			set
			{
				if ((this._SzulDat != value))
				{
					this.OnSzulDatChanging(value);
					this.SendPropertyChanging();
					this._SzulDat = value;
					this.SendPropertyChanged("SzulDat");
					this.OnSzulDatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CsapatFK", DbType="Int")]
		public System.Nullable<int> CsapatFK
		{
			get
			{
				return this._CsapatFK;
			}
			set
			{
				if ((this._CsapatFK != value))
				{
					if (this._Csapat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCsapatFKChanging(value);
					this.SendPropertyChanging();
					this._CsapatFK = value;
					this.SendPropertyChanged("CsapatFK");
					this.OnCsapatFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosztFK", DbType="Char(1)")]
		public System.Nullable<char> PosztFK
		{
			get
			{
				return this._PosztFK;
			}
			set
			{
				if ((this._PosztFK != value))
				{
					if (this._Poszt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPosztFKChanging(value);
					this.SendPropertyChanging();
					this._PosztFK = value;
					this.SendPropertyChanged("PosztFK");
					this.OnPosztFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpFK", DbType="Int")]
		public System.Nullable<int> ExpFK
		{
			get
			{
				return this._ExpFK;
			}
			set
			{
				if ((this._ExpFK != value))
				{
					if (this._experience.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExpFKChanging(value);
					this.SendPropertyChanging();
					this._ExpFK = value;
					this.SendPropertyChanged("ExpFK");
					this.OnExpFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SPE", DbType="Int")]
		public System.Nullable<int> SPE
		{
			get
			{
				return this._SPE;
			}
			set
			{
				if ((this._SPE != value))
				{
					this.OnSPEChanging(value);
					this.SendPropertyChanging();
					this._SPE = value;
					this.SendPropertyChanged("SPE");
					this.OnSPEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SHO", DbType="Int")]
		public System.Nullable<int> SHO
		{
			get
			{
				return this._SHO;
			}
			set
			{
				if ((this._SHO != value))
				{
					this.OnSHOChanging(value);
					this.SendPropertyChanging();
					this._SHO = value;
					this.SendPropertyChanged("SHO");
					this.OnSHOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAS", DbType="Int")]
		public System.Nullable<int> PAS
		{
			get
			{
				return this._PAS;
			}
			set
			{
				if ((this._PAS != value))
				{
					this.OnPASChanging(value);
					this.SendPropertyChanging();
					this._PAS = value;
					this.SendPropertyChanged("PAS");
					this.OnPASChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DRI", DbType="Int")]
		public System.Nullable<int> DRI
		{
			get
			{
				return this._DRI;
			}
			set
			{
				if ((this._DRI != value))
				{
					this.OnDRIChanging(value);
					this.SendPropertyChanging();
					this._DRI = value;
					this.SendPropertyChanged("DRI");
					this.OnDRIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEF", DbType="Int")]
		public System.Nullable<int> DEF
		{
			get
			{
				return this._DEF;
			}
			set
			{
				if ((this._DEF != value))
				{
					this.OnDEFChanging(value);
					this.SendPropertyChanging();
					this._DEF = value;
					this.SendPropertyChanged("DEF");
					this.OnDEFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PHY", DbType="Int")]
		public System.Nullable<int> PHY
		{
			get
			{
				return this._PHY;
			}
			set
			{
				if ((this._PHY != value))
				{
					this.OnPHYChanging(value);
					this.SendPropertyChanging();
					this._PHY = value;
					this.SendPropertyChanged("PHY");
					this.OnPHYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Csapat_Focistak", Storage="_Csapat", ThisKey="CsapatFK", OtherKey="CsapatSK", IsForeignKey=true)]
		public Csapat Csapat
		{
			get
			{
				return this._Csapat.Entity;
			}
			set
			{
				Csapat previousValue = this._Csapat.Entity;
				if (((previousValue != value) 
							|| (this._Csapat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Csapat.Entity = null;
						previousValue.Focistaks.Remove(this);
					}
					this._Csapat.Entity = value;
					if ((value != null))
					{
						value.Focistaks.Add(this);
						this._CsapatFK = value.CsapatSK;
					}
					else
					{
						this._CsapatFK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Csapat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="experience_Focistak", Storage="_experience", ThisKey="ExpFK", OtherKey="ID", IsForeignKey=true)]
		public experience experience
		{
			get
			{
				return this._experience.Entity;
			}
			set
			{
				experience previousValue = this._experience.Entity;
				if (((previousValue != value) 
							|| (this._experience.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._experience.Entity = null;
						previousValue.Focistaks.Remove(this);
					}
					this._experience.Entity = value;
					if ((value != null))
					{
						value.Focistaks.Add(this);
						this._ExpFK = value.ID;
					}
					else
					{
						this._ExpFK = default(Nullable<int>);
					}
					this.SendPropertyChanged("experience");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Poszt_Focistak", Storage="_Poszt", ThisKey="PosztFK", OtherKey="PosztID", IsForeignKey=true)]
		public Poszt Poszt
		{
			get
			{
				return this._Poszt.Entity;
			}
			set
			{
				Poszt previousValue = this._Poszt.Entity;
				if (((previousValue != value) 
							|| (this._Poszt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Poszt.Entity = null;
						previousValue.Focistaks.Remove(this);
					}
					this._Poszt.Entity = value;
					if ((value != null))
					{
						value.Focistaks.Add(this);
						this._PosztFK = value.PosztID;
					}
					else
					{
						this._PosztFK = default(Nullable<char>);
					}
					this.SendPropertyChanged("Poszt");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Liga")]
	public partial class Liga : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LigaID;
		
		private string _LigaNév;
		
		private EntitySet<Csapat> _Csapats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLigaIDChanging(int value);
    partial void OnLigaIDChanged();
    partial void OnLigaNévChanging(string value);
    partial void OnLigaNévChanged();
    #endregion
		
		public Liga()
		{
			this._Csapats = new EntitySet<Csapat>(new Action<Csapat>(this.attach_Csapats), new Action<Csapat>(this.detach_Csapats));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LigaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LigaID
		{
			get
			{
				return this._LigaID;
			}
			set
			{
				if ((this._LigaID != value))
				{
					this.OnLigaIDChanging(value);
					this.SendPropertyChanging();
					this._LigaID = value;
					this.SendPropertyChanged("LigaID");
					this.OnLigaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LigaNév", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LigaNév
		{
			get
			{
				return this._LigaNév;
			}
			set
			{
				if ((this._LigaNév != value))
				{
					this.OnLigaNévChanging(value);
					this.SendPropertyChanging();
					this._LigaNév = value;
					this.SendPropertyChanged("LigaNév");
					this.OnLigaNévChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Liga_Csapat", Storage="_Csapats", ThisKey="LigaID", OtherKey="LigaFK")]
		public EntitySet<Csapat> Csapats
		{
			get
			{
				return this._Csapats;
			}
			set
			{
				this._Csapats.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Csapats(Csapat entity)
		{
			this.SendPropertyChanging();
			entity.Liga = this;
		}
		
		private void detach_Csapats(Csapat entity)
		{
			this.SendPropertyChanging();
			entity.Liga = null;
		}
	}
}
#pragma warning restore 1591
